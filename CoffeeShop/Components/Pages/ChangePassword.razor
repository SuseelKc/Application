@page "/change-password"
<style>

    .form-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 30vh; 
}
.form-container form {
    max-width: 400px; 
    width: 100%;
}
</style>

<div class="form-body">
    <nav class="navbar navbar-light bg-light">
        <strong><h2 class="text-left mb-4">Change Password</h2></strong>
    </nav>
    <br>
    <p style="color: red; text-align: center;">@_errorMessage</p>
    <br>
    <br>
    <p style="color: green; text-align: center;">@_successMessage</p>
    <br>


    <div class="form-container text-center">
        @if (_globalState.CurrentUser != null && _globalState.CurrentUser.HasInitialPassword)
        {
            <AlertMessage Type="warning" Message="You are using the initial password. Please change it." />
        }
        <form class="text-center" @onsubmit="ChangePasswordHandler">
            <div class="form-floating">
                <input type="password" class="form-control current-password" @bind="_currentPassword"
                    placeholder="Current Password" />
                <label for="floatingInput">Current Password</label>
            </div>
            <div class="form-floating mb-3">
                <input type="password" class="form-control new-password" @bind="_newPassword"
                    placeholder="New Password" />
                <label for="floatingPassword">New Password</label>
            </div>
            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <AlertMessage Type="success" Message="@_successMessage" />
            }
            else if (!string.IsNullOrEmpty(_errorMessage))
            {
                <AlertMessage Type="danger" Message="@_errorMessage" />
            }
            <button class="w-100 btn btn-lg btn-primary" type="submit">
                <span class="oi oi-check"></span> Submit
            </button>
        </form>
    </div>
</div>


@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; } = new GlobalState();
    private string _currentPassword { get; set; }
    private string _newPassword { get; set; }
    private string _errorMessage = "";
    private string _successMessage = "";
    protected override void OnInitialized()
    {
        _errorMessage = "";
        _successMessage = "";
    }

    private void ChangePasswordHandler()
    {
        try
        {
            _errorMessage = "";
            _successMessage = "";

            // Check if _globalState.CurrentUser is not null before calling ChangePassword
            if (_globalState.CurrentUser != null)
            {
                _globalState.CurrentUser = UserService.ChangePassword(_globalState.CurrentUser.Id, _currentPassword, _newPassword);
                _currentPassword = "";
                _newPassword = "";
                _successMessage = "The password has been changed successfully.";
            }
            else
            {
                _errorMessage = "User not found. Please log in again.";
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            Console.WriteLine(e);
        }
    }
}
