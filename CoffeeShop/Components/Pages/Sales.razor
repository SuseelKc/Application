@page "/sales"
@inject NavigationManager Navigation

<h3>Sales</h3>

<EditForm Model="@orders">
    <div>
        <h3>Create Bill</h3>

        <label>Name:</label>
        @if (isNameEditable)
        {
            <input type="text" @bind="orders.CustomerName" />
        }
        else
        {
            <input type="text" @bind="@orders.CustomerName" readonly />
        }
        &ensp;
        <label>Conact:</label>
        @if (isContactEditable)
        {
            <input type="text" @bind="orders.Contact" />
        }
        else
        {
            <input type="text" @bind="@orders.Contact" readonly />
        }

        &ensp;
        <label>Date:</label>
        @if (isDateEditable)
        {
            <input type="date" @bind="orders.CreatedAt" />
        }
        else
        {
            <input type="date" @bind="@orders.CreatedAt" readonly />
        }

        <br><br>
        <!-- Coffee dropdown -->
        <label class="form-label">Coffee Name</label>
        <select class="form" @bind="selectedCoffeeId" @oninput="UpdateCoffeePrice" required>
            <option value="">Select Coffee</option>
            @foreach (var coffeeItem in coffee)
            {
                <option value="@coffeeItem.Id">@coffeeItem.CoffeeName</option>
            }
        </select>

        <!-- Display selected coffee price -->
        <label class="form-label">Price</label>
        <input value="@selectedCoffeePrice"  readonly />
        <br><br>

        <!-- Addins dropdown -->
        <label class="form-label">Addins</label>
        <select class="form" @bind="selectedAddinId" @oninput="UpdateAddinPrice">
            <option value="">Select Addin</option>
            @foreach (var addinItem in addin)
            {
                <option value="@addinItem.Id">@addinItem.Name</option>
            }
        </select>

        <!-- Display selected addin price -->
        <label class="form-label">Price</label>
        <input value="@selectedAddinPrice"   readonly />
        <br><br>
        <!-- Quantity-->
        <label class="form-label">Quantity</label>
        <input type="number" @bind="orders.Qty"  required/>
        <button class="btn btn-primary"  @onclick="Add">Add</button>
    </div>
</EditForm>
<br>
<br>
<div class="d-flex justify-content-between">
    <div><label>Name :</label><input type="text" value="@AddedName" readonly /></div>
    <div><button class="btn btn-danger" @onclick="clearAll">Clear All</button></div>
    <div><button class="btn btn-success" @onclick="GenerateBill">Generate Bill</button></div>  
</div>
<br>
<br>
<table class="table table-bordered">
    <thead>
        <tr>
            <td>Id</td>
            <td>Coffee</td>
            <td>Addins</td>
            <td>CoffeePrice</td>
            <td>AddinsPrice</td>
            @* <td>Price</td> *@
            <td>Qty</td>
            <td>Costs</td>
            <td>Action</td>
        </tr>
    </thead>
    <tbody>
         @foreach(var items in order)
            {
        <tr>           
                <td>@items.Id</td>
                <td>@items.CoffeeName</td>
                <td>@items.AddinName</td>
                <td>@items.CoffeePrice</td>
                <td>@items.AddinPrice</td>
                <td>@items.Qty</td>
                <td>@items.TotalPrice</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => Delete(items.Id)">Delete</button>
                </td>           
        </tr>
        }
        <tr>
            <td colspan="6"><strong>Grand Total:</strong></td>
            <td><strong>@grandTotal</strong></td>
            <td></td>
        </tr>

    </tbody>
</table>

@code {
    private List<CoffeeShop.Models.Addins> addin { get; set; }
    private List<CoffeeShop.Models.Coffee> coffee { get; set; }
    private List<CoffeeShop.Models.Order> order { get; set; }
    private List<CoffeeShop.Models.BillDetail> billDetail { get; set; }
    private List<CoffeeShop.Models.BillMaster> billMaster { get; set; }
    private CoffeeShop.Models.Order orders = new();
    private int grandTotal = 0;

    private int selectedCoffeeId { get; set; }
    private int selectedAddinId { get; set; }

    private int selectedCoffeePrice { get; set; }
    private int selectedAddinPrice { get; set; }

    private string AddedName = "";

    private bool isNameEditable = true;
    private bool isContactEditable = true;
    private bool isDateEditable = true;
    protected override void OnInitialized()
    {
        // Initialize your data
        addin = AddinService.GetAll();
        coffee = CoffeeService.GetAll();
        order = OrderService.GetAll();
    }

    private void UpdateCoffeePrice(ChangeEventArgs args)
    {
        var coffeeIdString = args.Value?.ToString();

        // Check if coffeeIdString is not empty or null before parsing
        if (!string.IsNullOrEmpty(coffeeIdString))
        {
            if (int.TryParse(coffeeIdString, out var coffeeId))
            {
                var selectedCoffee = coffee?.FirstOrDefault(c => c.Id == coffeeId);
                selectedCoffeePrice = selectedCoffee?.Price ?? 0;
                orders.CoffeePrice = selectedCoffeePrice;

            }
            else
            {           
                Console.WriteLine("Invalid coffee ID format");
            }
        }
        else
        {
            Console.WriteLine("Coffee ID is empty or null");
        }
    }

    private void UpdateAddinPrice(ChangeEventArgs args)
    {
        var addinIdString = args.Value?.ToString();

        // Check if addinIdString is not empty or null before parsing
        if (!string.IsNullOrEmpty(addinIdString))
        {
            if (int.TryParse(addinIdString, out var addinId))
            {
                var selectedAddin = addin?.FirstOrDefault(a => a.Id == addinId);
                selectedAddinPrice = selectedAddin?.Price ?? 0;
                orders.AddinPrice = selectedAddinPrice;
            }
            else
            {

                Console.WriteLine("Invalid addin ID format");
            }
        }
        else
        {         
            Console.WriteLine("Addin ID is empty or null");
        }
    }

    private void Add()
    {      
        // Check if a coffee is selected
        if (selectedCoffeeId == 0)
        {
            return;
        }
        if (orders.Qty <= 0)
        {
            return;
        }
        if (orders.Contact == null)
        {
            return;
        }
        if (orders.CreatedAt== null)
        {
            return;
        }

        orders.Id = order.Count + 1;

        var selectedCoffee = coffee?.FirstOrDefault(c => c.Id == selectedCoffeeId);
        orders.CoffeeName = selectedCoffee?.CoffeeName;

        if (selectedAddinId != 0)
        {
            // Get the selected addin
            var selectedAddin = addin?.FirstOrDefault(a => a.Id == selectedAddinId);
            orders.AddinName = selectedAddin?.Name;


        }
        else
        {
            // No addin selected, set it to null
            orders.AddinName = null;
            orders.AddinPrice = null;
        }


        if (orders.AddinPrice != null)
        {

            int coffeePrice = orders.CoffeePrice ?? 0;
            int addinsPrice = orders.AddinPrice ?? 0;
            int total = coffeePrice + addinsPrice;
            orders.TotalPrice = total * orders.Qty;


        }
        else
        {
            int coffeePrice = orders.CoffeePrice ?? 0;
            orders.TotalPrice = coffeePrice * orders.Qty;
        }

        OrderService.AddOrder(orders.Id, orders.CustomerName, orders.Contact, orders.CoffeeName, orders.AddinName, orders.CoffeePrice ?? 0, orders.AddinPrice ?? 0, orders.Qty, orders.TotalPrice,orders.CreatedAt);
        // Set the added name for display
        AddedName = orders.CustomerName;
        isNameEditable = false;
        isContactEditable = false;
        isDateEditable = false;
        order = OrderService.GetAll();
        CalculateGrandTotal();
    }

    private void Delete(int Id)
    {
        OrderService.DeleteOrder(Id);

        order = OrderService.GetAll();
        CalculateGrandTotal();

    }

    private void clearAll()
    {

        OrderService.ClearAllOrders();
        order = OrderService.GetAll();

        // Reset form fields
        orders = new CoffeeShop.Models.Order();
        selectedCoffeeId = 0;
        selectedAddinId = 0;
        selectedCoffeePrice = 0;
        selectedAddinPrice = 0;
        AddedName = "";
        isNameEditable = true;
        isContactEditable = true;
        isDateEditable = true;
        grandTotal = 0;
    }

    private void CalculateGrandTotal()
    {
        grandTotal = order.Sum(item => item.TotalPrice);
    }


    private void GenerateBill()
    {

        // Check if there are orders to generate a bill
        if (order.Any())
        {
            // Add BillMaster
            List<BillMaster> billMasters = BillMasterService.AddBillMaster(orders.Id, orders.CreatedAt, orders.CustomerName, orders.Contact, grandTotal);

            // Retrieve the ID of the last added BillMaster
            int billMasterId = billMasters.LastOrDefault()?.Id ?? 0;



            // Add BillDetails for each order
            foreach (var orderItem in order)
            {
                orderItem.Id = order.Count + 1;
                BillDetailService.AddBillDetail(orderItem.Id, billMasterId, orderItem.CoffeeName, orderItem.AddinName, orderItem.CoffeePrice ?? 0, orderItem.AddinPrice ?? 0, orderItem.TotalPrice);
                
            }

            // Clear orders after generating the bill
            OrderService.ClearAllOrders();

            // Reset form fields
            orders = new CoffeeShop.Models.Order();
            selectedCoffeeId = 0;
            selectedAddinId = 0;
            selectedCoffeePrice = 0;
            selectedAddinPrice = 0;
            AddedName = "";
            isNameEditable = true;
            isContactEditable = true;
            isDateEditable = true;
            grandTotal = 0;
        }
        else
        {
            // Show a message or take appropriate action when there are no orders to generate a bill
            Console.WriteLine("No orders to generate a bill.");
        }
    }


}
