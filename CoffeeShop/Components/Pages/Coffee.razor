@page "/coffee"
@inject NavigationManager Navigation
@using QuestPDF.Fluent;
@using QuestPDF.Fluent;
@using QuestPDF.Helpers;
@using QuestPDF.Infrastructure;

<strong><h1 class="text-left mb-4">Coffee</h1></strong>

<EditForm Model="@coffees" >
    <div class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <label class="form-label">Coffee Name</label>
                <input type="text" class="form-control" id="coffee" @bind="coffees.CoffeeName" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Price</label>
                <input type="number" class="form-control" id="price" @bind="coffees.Price" />
            </div>
        </div>
        <br>
        <div class="d-flex justify-content-between" >
            <button class="btn btn-primary" @onclick="Add">Create</button>
            <button class="btn btn-success ms-2" @onclick="SavePDF">Generate PDF</button>
        </div>
    </div>
</EditForm>

<br>

<div class="container">
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>S.No</th>
                    <th>Coffee</th>
                    <th>Price ($)</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>

                @for (int i=0; i<coffee.Count; i++)
                {
                    var item = coffee[i];
                    <tr>
                        <td>@(i + 1)</td>
                        <td>@item.CoffeeName</td>
                        <td>@item.Price</td>
                        <td><button class="btn btn-danger" @onclick="() => Delete(item.Id)">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private List<CoffeeShop.Models.Coffee> coffee { get; set; }

    private CoffeeShop.Models.Coffee coffees = new();

    protected override void OnInitialized()
    {
        coffee = CoffeeService.GetAll();
    }

    private void Add()
    {
        if (string.IsNullOrWhiteSpace(coffees.CoffeeName))
        {
            return;
        }
        //for solving id duplicacy
        if (coffee.Count == 0) { coffees.Id = coffee.Count + 1; }
        else
        {
            coffees.Id = coffee.Max(c => c.Id) + 1;
        }
        //
        CoffeeService.AddCoffee(coffees.Id, coffees.CoffeeName, coffees.Price);

        coffees = new();
        coffee = CoffeeService.GetAll();

    }

    private void Delete(int Id)
    {
        CoffeeService.DeleteCoffee(Id);
        coffee = CoffeeService.GetAll();
    }

    private void SavePDF()
    {
        coffee = CoffeeService.GetAll();

        if (coffee!= null)
        {
            
                var appPath = Utils.GetAppDirectoryPath();
                Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(1, Unit.Centimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(15));

                        page.Header().Text("Bislerium café -- Coffee Types ");
                     

                        page.Content().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                
                            });

                            table.Header(header =>
                            {
                                header.Cell().Text("SNo.");
                                header.Cell().Text("Coffee");
                            
                                header.Cell().Text("Coffee Price");
                             
                            });

                            int index = 1;
                                foreach (var item in coffee)
                            {
                                table.Cell().Text(index.ToString());
                                table.Cell().Text(item.CoffeeName);
                                                          
                                table.Cell().Text(item.Price.ToString());
                                index++;
                            }

                         
                        });

                        page.Footer().Text(text =>
                        {
                            text.Span("Page :");
                            text.CurrentPageNumber();
                        });
                    });
                }).GeneratePdf(Path.Combine(appPath, "Coffee Types.pdf"));
            
        }
        }
    }


