@page "/addins"
@using CoffeeShop.Models
@using QuestPDF.Fluent;
@using QuestPDF.Fluent;
@using QuestPDF.Helpers;
@using QuestPDF.Infrastructure;

<strong><h1 class="text-left mb-4">Addins</h1></strong>

<EditForm Model="@addins">
    <div class="mb-4">
         <div class="row">
            <div class="col-md-6">
                <label class="form-label">Flavours</label>
                <input type="text" class="form-control" @bind="addins.Name" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Price</label>
                <input type="number" class="form-control" @bind="addins.Price" />
            </div>
        </div>
        <br>
        <div class="d-flex justify-content-between">
        <button class="btn btn-primary" @onclick="Add">Create</button>
        <button class="btn btn-success ms-2" @onclick="SavePDF">Generate PDF</button>
        </div>
    </div>
</EditForm>

<br>

<div class="container">
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>S.No</th>
                    <th>Flavours</th>
                    <th>Price</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @for (int i=0; i<addin.Count; i++)
                {
                    var item = addin[i];
                    <tr>
                        <td>@(i+1)</td>
                        <td>@item.Name</td>
                        <td>@item.Price</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => Delete(item.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private List<CoffeeShop.Models.Addins> addin { get; set; }

    private CoffeeShop.Models.Addins addins = new();

    protected override void OnInitialized()
    {
        addin = AddinService.GetAll();
    }

    private void Add()
    {
        if (string.IsNullOrWhiteSpace(addins.Name))
        {
            return;
        }
        //for solving id duplicacy
        if (addin.Count == 0) { addins.Id = addin.Count + 1; }
        else
        {
            addins.Id = addin.Max(c => c.Id) + 1;
        }
        //
        AddinService.AddAddins(addins.Id, addins.Name, addins.Price);

        addins = new();
        addin = AddinService.GetAll();

    }

    private void Delete(int Id)
    {
        AddinService.DeleteAddins(Id);
        addin = AddinService.GetAll();
    }

    private void SavePDF()
    {
        

        if (addin != null)
        {

            var appPath = Utils.GetAppDirectoryPath();
            Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(1, Unit.Centimetre);
                    page.PageColor(Colors.White);
                    page.DefaultTextStyle(x => x.FontSize(15));

                    page.Header().Text("Bislerium café -- Addins Availables ");


                    page.Content().Table(table =>
                    {
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn();
                            columns.RelativeColumn();
                            columns.RelativeColumn();

                        });

                        table.Header(header =>
                        {
                            header.Cell().Text("SNo.");
                            header.Cell().Text("Addins");

                            header.Cell().Text("Price");

                        });

                        int index = 1;
                        foreach (var item in addin)
                        {
                            table.Cell().Text(index.ToString());
                            table.Cell().Text(item.Name);

                            table.Cell().Text(item.Price.ToString());
                            index++;
                        }


                    });

                    page.Footer().Text(text =>
                    {
                        text.Span("Page :");
                        text.CurrentPageNumber();
                    });
                });
            }).GeneratePdf(Path.Combine(appPath, "Addins.pdf"));

        }
    }

}
