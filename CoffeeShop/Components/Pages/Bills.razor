@page "/bills"
@using QuestPDF.Fluent;
@using QuestPDF.Fluent;
@using QuestPDF.Helpers;
@using QuestPDF.Infrastructure;

<h3>Sales</h3>


<table class="table table-bordered">
    <thead>
        <tr>
            <td>Id</td>
            <td>Date</td>
            <td>UserName</td>
            <td>Contact</td>
            <td>Totaal Amount</td>
            
            <td>Action</td>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in billMaster)
        {
            <tr>

                <td>@item.Id</td>
                <td>@item.CreatedAt</td>
                <td>@item.CustomerName</td>
                <td>@item.Contact</td>
                <td>@item.TotalPrice</td>             
                <td>
                  
                        <button class="btn btn-primary" @onclick="() => Print(item.Id)">PDF</button>
                   
                </td>


            </tr>
        }
    </tbody>
</table>



@code {
    private List<CoffeeShop.Models.BillMaster> billMaster { get; set; }
    private List<CoffeeShop.Models.BillDetail> billDetail { get; set; }

    protected override void OnInitialized()
    {
        billMaster = BillMasterService.GetAll();
        billDetail = BillDetailService.GetAll();

    }
  

    private void Print(int id)
    {
        // Find the bill master with the specified id
        var billMasterToPrint = billMaster.FirstOrDefault(b => b.Id == id);

        if (billMasterToPrint != null)
        {
            // Find the associated bill details
            var detailsToPrint = billDetail.Where(b => b.BillMasterId == id).ToList();

            if (detailsToPrint != null && detailsToPrint.Any())
            {
                var appPath = Utils.GetAppDirectoryPath();
                Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(1, Unit.Centimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(15));

                        page.Header().Text("Bislerium café ");

                        // Customer details
                        page.Content().Text(text =>
                        {
                            text.Line($"Customer Name: {billMasterToPrint.CustomerName}");
                            text.Line($"Contact: {billMasterToPrint.Contact}");
                        });

                        page.Content().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Text("Id");
                                header.Cell().Text("Coffee");
                                header.Cell().Text("Addins");
                                header.Cell().Text("Coffee Price");
                                header.Cell().Text("Addins Price");
                                header.Cell().Text("Qty");
                                header.Cell().Text("Total");
                            });

                            int index = 1;
                            foreach (var item in detailsToPrint)
                            {
                                table.Cell().Text(index.ToString());
                                table.Cell().Text(item.CoffeeName);
                                table.Cell().Text(item.AddinName);
                                table.Cell().Text(item.CoffeePrice.ToString());
                                table.Cell().Text(item.AddinPrice.ToString());
                                table.Cell().Text(item.Qty.ToString());
                                table.Cell().Text(item.TotalPrice.ToString());
                                index++;
                            }

                            // Grand total row
                            table.Cell().ColumnSpan(6).AlignRight().Text($"Grand Total:   {billMasterToPrint.TotalPrice.ToString()}");
                        });

                        page.Footer().Text(text =>
                        {
                            text.Span("Page :");
                            text.CurrentPageNumber();
                        });
                    });
                }).GeneratePdf(Path.Combine(appPath, $"Bill-{billMasterToPrint.Id}.pdf"));
            }
        }
    }

}


